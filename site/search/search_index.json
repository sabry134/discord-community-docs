{"config": {"lang": ["en"], "separator": "[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Installation", "text": ""}, {"location": "#installation", "title": "Installation", "text": ""}, {"location": "#requirements", "title": "Requirements", "text": "<ul> <li>Node.js Version: You must use Node.js version 18 or higher. To install and switch to Node.js v18, use the following commands:</li> </ul> nvm install 18v18.20.4 is already installed.Now using node v18.20.4 (npm v10.8.3)nvm use 18Now using node v18.20.4 (npm v10.8.3) <p> - Github SSH KEY: It is not mandatory, but in this guide, the repository clone will be done using the SSH key method.</p> git clone git@github.com:sabry134/Discord-Community-Dashboard.gitCloning into 'Discord-Community-Dashboard'...remote: Enumerating objects: 573, done.remote: Counting objects: 100% (54/54), done.remote: Compressing objects: 100% (45/45), done.remote: Total 573 (delta 36), reused 20 (delta 8), pack-reused 519 (from 1)Receiving objects: 100% (573/573), 142.76 MiB | 7.00 MiB/s, done.Resolving deltas: 100% (106/106), done."}, {"location": "#getting-started", "title": "Getting Started", "text": ""}, {"location": "#with-docker", "title": "With Docker", "text": "<p>To start the application using Docker, run:</p> <pre><code>./start.sh\n</code></pre> <p>To stop the Docker, please run:</p> <pre><code>./stop.sh\n</code></pre>"}, {"location": "#without-docker", "title": "Without Docker", "text": "<p>To start the application without Docker, open a terminal and run:</p> cd discord_community_front &amp;&amp; ./start_no_docker.shCompiled successfully!You can now view discord-community-dashboard in the browser.  Local:            http://localhost:8080/discord-community-dashboard  On Your Network:  http://[NETWORK IP]:8080/discord-community-dashboardNote that the development build is not optimized.To create a production build, use npm run build.webpack compiled successfully <p>In another terminal, start the backend server:</p> cd discord_community_server &amp;&amp; node server.js(node:173369) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version(Use `node --trace-warnings ...` to show where the warning was created)(node:173369) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major versionServer is listening on port 8081MongoDB connected successfullyAllowedAccess with ID: 495265351270137883 already existsAdminWhitelist with ID: 495265351270137883 already exists <p></p>"}, {"location": "#environment-variables", "title": "Environment Variables", "text": "<p>You need to create a .env file in the discord_community_server directory to configure your application. The following variables must be included in your .env file:</p> <pre><code>MONGODB_URI=\nDISCORD_CLIENT_ID=\nDISCORD_CLIENT_SECRET=\nDISCORD_BOT_TOKEN=\nDEFAULT_ID=\nADMIN_DEFAULT_ID=\nGUILD_ID=\nDISCORD_EVERYONE_ROLE_ID=\nCOOKIE_SECRET=\nDISCORD_REDIRECT_URI=http://localhost:8081/discord-oauth-callback\n</code></pre> <p>Make sure to fill in the values appropriately. Do not share sensitive information publicly.</p> <p></p>"}, {"location": "#discord-setup", "title": "Discord setup", "text": "<p>Besides oauth which will be explained later. Here's how you can get a few .env data.</p> <p>COOKIE_SECRET:</p> nodeWelcome to Node.js v18.20.4.Type \".help\" for more information.crypto.randomUUID()'YOUR_CRYPTO_SECRET' <p>DEFAULT_ID &amp; ADMIN_DEFAULT_ID: Your discord ID  GUILD_ID: Your server ID  DISCORD_EVERYONE_ROLE_ID: The ID for the @everyone role (same as your Guild ID)</p> <p></p>"}, {"location": "#discord-oauth-setup", "title": "Discord Oauth setup", "text": ""}, {"location": "#overview", "title": "Overview", "text": "<p>To integrate Discord OAuth into your application, follow these steps to create an application in the Discord Developer Portal and obtain your credentials.</p>"}, {"location": "#step-1-create-a-discord-application", "title": "Step 1: Create a Discord Application", "text": "<ol> <li>Go to the Discord Developer Portal: Visit Discord Developer Portal.</li> <li>Log In: Sign in with your Discord account.</li> <li>Create a New Application:</li> <li>Click on the \"New Application\" button.</li> <li>Enter a name for your application and click \"Create\".</li> </ol>"}, {"location": "#step-2-set-up-oauth2", "title": "Step 2: Set Up OAuth2", "text": "<ol> <li>Navigate to the OAuth2 Tab:</li> <li>Select your application from the list.</li> <li> <p>Click on the \"OAuth2\" tab in the left sidebar.</p> </li> <li> <p>Configure OAuth2 Settings:</p> </li> <li>Redirects: Under \"Redirects,\" add your redirect URI. This should be your backend endpoint that handles the OAuth callback (e.g., <code>http://localhost:8081/discord-oauth-callback</code>).</li> <li>Scopes: Select the scopes your application requires. For basic user authentication, select:<ul> <li><code>identify</code></li> <li><code>join</code></li> </ul> </li> <li> <p>Bot: If your application requires bot functionality, you can also generate a bot token under the \"Bot\" tab.</p> </li> <li> <p>Generate the OAuth2 URL:</p> </li> <li>Scroll down to \"OAuth2 URL Generator.\"</li> <li>Select the scopes you configured earlier.</li> <li>Copy the generated URL.</li> </ol>"}, {"location": "#step-3-set-up-your-env-file", "title": "Step 3: Set Up Your <code>.env</code> File", "text": "<p>Add the following lines to your <code>.env</code> file in the <code>discord_community_server</code> directory, filling in the placeholders with your application's values:</p> <p></p><pre><code>DISCORD_CLIENT_ID=your_client_id\nDISCORD_CLIENT_SECRET=your_client_secret\nDISCORD_REDIRECT_URI=http://localhost:8081/discord-oauth-callback\n</code></pre>"}, {"location": "#mongodb-database-setup", "title": "MongoDB Database Setup", "text": "<p>To set up a MongoDB database, follow these steps:</p> <ul> <li>Create an Account on MongoDB Atlas: Go to MongoDB Atlas and sign up for an account.</li> <li>Create a New Cluster: After logging in, click on \"Build a Cluster\" and follow the prompts to create a new cluster.</li> <li>Connect to Your Cluster: Once your cluster is created, click on \"Connect\" and follow the instructions to add your IP address and create a database user.</li> <li>Get the Connection String: After setting up your user, you will be provided with a connection string. Replace the placeholder username and password in the string with your MongoDB user credentials. </li> </ul>"}, {"location": "TODO/", "title": "TODO", "text": "<p>CoSphere</p> <ul> <li>Option to auto add to server or not</li> <li>Announcement by bot using the platform</li> <li>API system to link with the bot</li> <li>Integrated Community bot &amp; webhook (events &amp; tournaments manager) -&gt; channels system</li> <li>Discord shop role and config setup</li> <li>Show audit log</li> <li>Schedule event (goes with announcement), is a checkbox \"Schedule an event</li> <li>Event informations webhook &amp; results</li> <li>Role Assignment Automation: Users can automatically assign roles based on certain criteria, such as reactions, activity, or commands.</li> <li>Make groups of channels per events (channel + VC) and can hide/unhide the group itself</li> <li>Automation that will show latest template version</li> <li>Docs</li> <li>CICD</li> <li>Discord server embed -&gt; Home</li> <li>Advertiser</li> <li>Events suggestion system</li> <li>Bot template Community events:</li> </ul> <p>Discord events In-game events In-game tournaments Contests Giveaways</p> <p>Home</p> <p>Advertiser Discord server embed</p> <p>Admin </p> <p>-&gt; System in dashboard for this:</p> <p>Discord</p> <p>ADD_TO_SERVER  DISCORD_CLIENT_ID DISCORD_CLIENT_SECRET DISCORD_BOT_TOKEN DEFAULT_ID ADMIN_DEFAULT_ID GUILD_ID</p> <p>Announcements</p> <p>ANNOUNCEMENT_CHANNEL NEW_ANNOUNCEMENT</p> <p>Channel</p> <p>CHANNEL_GROUPS HIDE/SHOW_GROUPS</p> <p>Shop</p> <p>ROLE_SHOP_SETUP -&gt; ID/PRICE POINTS_MANAGEMENT -&gt; ADD/REMOVE POINTS</p> <p>Api</p> <p>PUBLIC_API -&gt; TRUE/FALSE</p> <p>Users USERS (ban user from dashboard, specific ban time, perma ban, roles)</p> <p>COMMUNITY_EVENTS -&gt; Setup tournament channels/events channels</p> <p>Dashboard</p> <p>RULES STAFF_LIST</p> <p>Announcements</p> <p>DASHBOARD_ANNOUNCEMENTS COMMUNITY POSTS</p> <p>Recruitment</p> <p>Users can play music in a VC using the dashboard</p> <p>Community</p> <p>LETS_PLAY -&gt; Webhook sending a message in server saying someone is looking for a partner</p> <p>Support</p> <p>TICKET_SYSTEM</p> <p>Moderators</p> <p>MODERATION_PANEL -&gt; Evidence handlers -&gt; User/evidence link, dashboard punishment system that controls a bot to issue the muted role for a specific time</p> <p>Bot Management</p> <p>COMMANDS_MANAGEMENT ENABLE/DISABLE COMMANDS TO BE ADDED IN A SPECIFIC FOLDER BOT_CRON -&gt; Send a message every.... BOT_STARTER -&gt; Start/stop a bot</p> <p>API SETUP</p> <p>Announcement page Settings page</p> <p>Support page</p> <p>Kubernetes support Docker support</p> <p>RELEASE</p> <p>Enable/disable API</p> <p>/users/{ENDPOINT}</p> <p>API Features</p> <ul> <li>Make a post</li> <li>Make an alert</li> <li>Create a position</li> <li>Edit a position</li> <li>New role shop</li> <li>Edit role shop</li> <li>Enable bot</li> <li>Disable bot</li> <li>View logs</li> </ul> <p>Scopes</p> <p>API.admin -&gt; Make announcement, Set staff list, Set Community rules DONE API.moderate -&gt; Warn, ban, mute, unmute, unban</p> <p>API.community -&gt; Make post, View posts, View staff list, view community rules  DONE API.position -&gt; Create position, Edit position, Delete position DONE API.roleShop -&gt; New role shop, Edit role shop, Delete role shop, add points, remove points DONE API.maintainer -&gt; Enable bot, disable bot, View logs DONE</p> <p>Admin -&gt; Enable monthly log clear</p> <p>Settings</p> <p>ROLE_NOTIFICATION_PREFERENCE CRON MANAGEMENT -&gt; AREA NAME &amp; infos</p> <p>Announcements page &amp; setup</p> <p>SELF_SERVICE</p> <p>Discord roles, Discord tickets</p> <p>self service setup Self-services announcements settings</p> <p>Release</p> <p>Trigger docker on windows</p>"}, {"location": "announcements/", "title": "Announcements", "text": "<p>123</p>"}, {"location": "api/", "title": "API Documentation", "text": ""}, {"location": "api/#api-documentation", "title": "API Documentation", "text": ""}, {"location": "api/#table-of-contents", "title": "Table of Contents", "text": "<ul> <li>API Documentation</li> <li>Table of Contents</li> <li>API Management</li> <li>Scopes</li> <li>API Endpoints method</li> <li>API Endpoints<ul> <li>/user/hello</li> <li>/users/new-announcement</li> <li>/users/staff-list</li> <li>/users/community-rules</li> <li>/users/staff-list</li> <li>/users/community-rules</li> <li>/users/new-position</li> <li>/users/delete-position/:position_name</li> <li>/users/shop-setup</li> <li>/users/points/:userId</li> <li>/users/add-points</li> <li>/users/remove-points</li> <li>/users/shop-setup</li> <li>/users/buy-role</li> <li>/users/is-running</li> <li>/users/start-bot</li> <li>/users/stop-bot</li> <li>/users/disable-command/:commandName</li> <li>/users/enable-command/:commandName</li> <li>/users/logs</li> <li>/users/warn-user</li> <li>/users/mute-user</li> <li>/users/kick-user</li> <li>/users/unmute-user</li> <li>/users/discord-ban-user</li> <li>/users/discord-unban-user</li> </ul> </li> </ul>"}, {"location": "api/#api-management", "title": "API Management", "text": "<p>On your API settings page, you can enable or disable your API along with editing your scopes.  </p> <p>Warning</p> <p>A token is also necessary to use the public endpoint, otherwise you will receive an error.</p>"}, {"location": "api/#scopes", "title": "Scopes", "text": "API Scopes usage Scope name Usage Manual api.admin When enabled, this scope will whitelist all admin permission endpoints \u2705 api.moderate When enabled, this scope will whitelist all the moderation permission endpoints \u2705 api.community When enabled, this scope will whitelist all the permission endpoints for the \"Community\" page \u2705 api.position When enabled, this scope will whitelist all the position permission endpoints \u2705 api.roleShop When enabled, this scope will whitelist all the shop permission endpoints \u2705 api.maintain When enabled, this scope will whitelist all the bot management permission endpoints \u2705 <p>Each of the public endpoints require specific scopes, the list can be found below</p> Scopes needed for endpoints Endpoint api.admin api.moderate api.community api.position api.roleShop api.maintain /users/hello \u274c \u274c \u274c \u274c \u274c \u274c /users/new-announcement \u2705 \u274c \u274c \u274c \u274c \u274c /users/staff-list (POST) \u2705 \u274c \u274c \u274c \u274c \u274c /users/community-rules (POST) \u2705 \u274c \u274c \u274c \u274c \u274c /users/logs \u274c \u2705 \u274c \u274c \u274c \u274c /users/warn-user \u274c \u2705 \u274c \u274c \u274c \u274c /users/mute-user \u274c \u2705 \u274c \u274c \u274c \u274c /users/unmute-user \u274c \u2705 \u274c \u274c \u274c \u274c /users/kick-user \u274c \u2705 \u274c \u274c \u274c \u274c /users/discord-ban-user \u274c \u2705 \u274c \u274c \u274c \u274c /users/discord-unban-user \u274c \u2705 \u274c \u274c \u274c \u274c /users/new-post \u274c \u274c \u2705 \u274c \u274c \u274c /users/staff-list (GET) \u274c \u274c \u2705 \u274c \u274c \u274c /users/community-rules (GET) \u274c \u274c \u2705 \u274c \u274c \u274c /users/new-position \u274c \u274c \u274c \u2705 \u274c \u274c /users/delete-position \u274c \u274c \u274c \u2705 \u274c \u274c /users/shop-setup \u274c \u274c \u274c \u274c \u2705 \u274c /users/points/{userId} \u274c \u274c \u274c \u274c \u2705 \u274c /users/add-points \u274c \u274c \u274c \u274c \u2705 \u274c /users/remove-points \u274c \u274c \u274c \u274c \u2705 \u274c /users/buy-role \u274c \u274c \u274c \u274c \u2705 \u274c /users/is-running \u274c \u274c \u274c \u274c \u274c \u2705 /users/start-bot \u274c \u274c \u274c \u274c \u274c \u2705 /users/stop-bot \u274c \u274c \u274c \u274c \u274c \u2705 /users/disable-command/{commandName} \u274c \u274c \u274c \u274c \u274c \u2705 /users/enable-command/{commandName} \u274c \u274c \u274c \u274c \u274c \u2705"}, {"location": "api/#api-endpoints-method", "title": "API Endpoints method", "text": "Scopes needed for endpoints Public Endpoint GET POST PUT DELETE /users/hello \u2705 \u274c \u274c \u274c /users/new-announcement \u2705 \u274c \u274c \u274c /users/staff-list \u2705 \u2705 \u274c \u274c /users/community-rules \u2705 \u2705 \u274c \u274c /users/logs \u2705 \u274c \u274c \u274c /users/warn-user \u274c \u2705 \u274c \u274c /users/mute-user \u274c \u2705 \u274c \u274c /users/unmute-user \u274c \u2705 \u274c \u274c /users/kick-user \u274c \u2705 \u274c \u274c /users/discord-ban-user \u2705 \u274c \u274c \u274c /users/discord-unban-user \u2705 \u274c \u274c \u274c /users/new-position \u274c \u2705 \u274c \u274c /users/delete-position \u274c \u274c \u274c \u2705 /users/shop-setup \u2705 \u2705 \u274c \u2705 /users/points/{userId} \u2705 \u274c \u274c \u274c /users/add-points \u274c \u2705 \u274c \u274c /users/remove-points \u274c \u2705 \u274c /users/buy-role \u274c \u2705 \u274c \u274c /users/is-running \u2705 \u274c \u274c \u274c /users/start-bot \u2705 \u274c \u274c \u274c /users/stop-bot \u2705 \u274c \u274c \u274c /users/disable-command/{commandName} \u274c \u2705 \u274c \u274c /users/enable-command/{commandName} \u274c \u2705 \u274c \u274c"}, {"location": "api/#api-endpoints", "title": "API Endpoints", "text": ""}, {"location": "api/#userhello", "title": "/user/hello", "text": "<ul> <li>Method: GET</li> <li>Description: Returns a greeting message.</li> <li>Response:</li> <li><code>200 OK</code>: 'Hello world'</li> </ul>"}, {"location": "api/#usersnew-announcement", "title": "/users/new-announcement", "text": "<ul> <li>Method: POST</li> <li>Description: Creates a new announcement.</li> <li>Payload: { title, content, image }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Announcement created successfully', announcement: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { message: 'Title is required' } or { message: 'Either content or image must be provided' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to create announcement' }</li> </ul>"}, {"location": "api/#usersstaff-list", "title": "/users/staff-list", "text": "<ul> <li>Method: POST</li> <li>Description: Updates the staff list.</li> <li>Payload: { content }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Staff list updated successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'Content is required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to update staff list' }</li> </ul>"}, {"location": "api/#userscommunity-rules", "title": "/users/community-rules", "text": "<ul> <li>Method: POST</li> <li>Description: Updates the community rules.</li> <li>Payload: { content }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Community rules updated successfully' }</li> <li><code>400 Bad Request</code>: { error: 'Content is required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to update community rules' }</li> </ul>"}, {"location": "api/#usersstaff-list_1", "title": "/users/staff-list", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves the latest staff list.</li> <li>Response:</li> <li><code>200 OK</code>: { staffList: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { message: 'Staff list not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to retrieve staff list' }</li> </ul>"}, {"location": "api/#userscommunity-rules_1", "title": "/users/community-rules", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves the latest community rules.</li> <li>Response:</li> <li><code>200 OK</code>: { communityRules: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { message: 'Community rules not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to retrieve community rules' }</li> </ul>"}, {"location": "api/#usersnew-position", "title": "/users/new-position", "text": "<ul> <li>Method: POST</li> <li>Description: Creates or updates a position.</li> <li>Payload: { position_name, questions, discord_channel, position_image, position_description, status }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Position created successfully', position: { ... } }</li> <li><code>200 OK</code>: { message: 'Position updated successfully', position: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { message: 'You can only create up to 10 positions' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to create or update position' }</li> </ul>"}, {"location": "api/#usersdelete-positionposition_name", "title": "/users/delete-position/:position_name", "text": "<ul> <li>Method: DELETE</li> <li>Description: Deletes a position by name.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Position deleted successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { message: 'Position not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to delete position' }</li> </ul>"}, {"location": "api/#usersshop-setup", "title": "/users/shop-setup", "text": "<ul> <li>Method: POST</li> <li>Description: Sets up a new role in the shop.</li> <li>Payload: { role_name, price, role_id }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Role added successfully', role: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'role_name, price, and role_id are required' } or { error: 'Role name already exists' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to validate role_id with Discord' }</li> </ul>"}, {"location": "api/#userspointsuserid", "title": "/users/points/:userId", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves the points for a specific user.</li> <li>Response:</li> <li><code>200 OK</code>: { user_id, points }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'userId is required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersadd-points", "title": "/users/add-points", "text": "<ul> <li>Method: POST</li> <li>Description: Adds points to a user.</li> <li>Payload: { user_id, points }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Points added successfully', user: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and points are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersremove-points", "title": "/users/remove-points", "text": "<ul> <li>Method: POST</li> <li>Description: Removes points from a user.</li> <li>Payload: { user_id, points }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Points removed successfully', user_id, points }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and points are required' }</li> <li><code>404 Not Found</code>: { error: 'User not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersshop-setup_1", "title": "/users/shop-setup", "text": "<ul> <li>Method: DELETE</li> <li>Description: Deletes a role from the shop.</li> <li>Payload: { role_name }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Role deleted successfully', role: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'role_name is required' }</li> <li><code>404 Not Found</code>: { error: 'Role not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersbuy-role", "title": "/users/buy-role", "text": "<ul> <li>Method: POST</li> <li>Description: Allows a user to buy a role.</li> <li>Payload: { user_id, role_name }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Role purchased and assigned successfully', role: role_name }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and role_name are required' } or { error: 'Not enough points to buy this role' } or { error: 'User already has this role on Discord' }</li> <li><code>404 Not Found</code>: { error: 'Role not found' } or { error: 'User not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to fetch user roles from Discord' } or { error: 'Failed to assign role on Discord' } or { error: 'Failed to send DM with embed' }</li> </ul>"}, {"location": "api/#usersis-running", "title": "/users/is-running", "text": "<ul> <li>Method: GET</li> <li>Description: Checks if the bot is currently running.</li> <li>Response:</li> <li><code>200 OK</code>: { isRunning: true, message: 'Bot is running.' } or { isRunning: false, message: 'Bot is not running.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { message: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersstart-bot", "title": "/users/start-bot", "text": "<ul> <li>Method: GET</li> <li>Description: Starts the bot if it is not already running.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Bot started successfully.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to start bot.' }</li> </ul>"}, {"location": "api/#usersstop-bot", "title": "/users/stop-bot", "text": "<ul> <li>Method: GET</li> <li>Description: Stops the bot if it is currently running.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Bot stopped successfully.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to stop bot.' }</li> </ul>"}, {"location": "api/#usersdisable-commandcommandname", "title": "/users/disable-command/:commandName", "text": "<ul> <li>Method: POST</li> <li>Description: Disables a specific command.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Command  disabled.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { error: 'Command not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersenable-commandcommandname", "title": "/users/enable-command/:commandName", "text": "<ul> <li>Method: POST</li> <li>Description: Enables a previously disabled command.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Command  enabled.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { error: 'Command not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#userslogs", "title": "/users/logs", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves logs of actions performed by moderators.</li> <li>Response:</li> <li><code>200 OK</code>: [{ title, moderator, actionType, reason, details, timestamp }]</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#userswarn-user", "title": "/users/warn-user", "text": "<ul> <li>Method: POST</li> <li>Description: Issues a warning to a user.</li> <li>Payload: { user_id, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'WARN action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersmute-user", "title": "/users/mute-user", "text": "<ul> <li>Method: POST</li> <li>Description: Mutes a user for a specified duration.</li> <li>Payload: { user_id, duration, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'MUTE action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, duration, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#userskick-user", "title": "/users/kick-user", "text": "<ul> <li>Method: POST</li> <li>Description: Kicks a user from the server.</li> <li>Payload: { user_id, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'KICK action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersunmute-user", "title": "/users/unmute-user", "text": "<ul> <li>Method: POST</li> <li>Description: Unmutes a previously muted user.</li> <li>Payload: { user_id, moderator }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'User has been unmuted successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and moderator are required' }</li> <li><code>404 Not Found</code>: { error: 'Muted role not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersdiscord-ban-user", "title": "/users/discord-ban-user", "text": "<ul> <li>Method: POST</li> <li>Description: Bans a user from the server.</li> <li>Payload: { user_id, duration, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'BAN action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, duration, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersdiscord-unban-user", "title": "/users/discord-unban-user", "text": "<ul> <li>Method: POST</li> <li>Description: Unbans a previously banned user.</li> <li>Payload: { user_id, moderator }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'User has been unbanned successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "bot-management/", "title": "Bot management", "text": "<p>123</p>"}, {"location": "community/", "title": "Community", "text": "<p>123</p>"}, {"location": "deployment/", "title": "Deployment", "text": "<p>123</p>"}, {"location": "development-plans/", "title": "Incoming Features", "text": ""}, {"location": "development-plans/#incoming-features", "title": "Incoming Features", "text": "<p>The following features are on the way to enhance the Discord Community Dashboard:</p>"}, {"location": "development-plans/#planned-enhancements", "title": "Planned Enhancements", "text": ""}, {"location": "development-plans/#1-cicd", "title": "1. CI/CD", "text": "<ul> <li>Implement Continuous Integration and Continuous Deployment for streamlined updates.</li> </ul>"}, {"location": "development-plans/#2-automated-bot-tests", "title": "2. Automated Bot Tests", "text": "<ul> <li>Introduce automated testing for bots to ensure reliability and performance.</li> </ul>"}, {"location": "development-plans/#3-self-service-management", "title": "3. Self-Service Management", "text": "<ul> <li>Enable users to manage their settings and preferences independently.</li> </ul>"}, {"location": "development-plans/#4-npm-developer-package-template-and-publishing-guide", "title": "4. NPM Developer Package Template and Publishing Guide", "text": "<ul> <li>Provide a template and comprehensive guide for creating and publishing NPM packages.</li> </ul>"}, {"location": "development-plans/#5-more-api-endpoints", "title": "5. More API Endpoints", "text": "<ul> <li>Expand the functionality of the API with additional endpoints.</li> </ul>"}, {"location": "development-plans/#6-more-api-scopes", "title": "6. More API Scopes", "text": "<ul> <li>Introduce new scopes for enhanced access control and functionality.</li> </ul>"}, {"location": "development-plans/#7-discord-bot-guide-using-the-public-apis", "title": "7. Discord Bot Guide Using the Public APIs", "text": "<ul> <li>Develop a guide for creating Discord bots utilizing public APIs effectively.</li> </ul> <p>Stay tuned for these exciting features aimed at improving your community management experience!</p>"}, {"location": "docker/", "title": "Docker", "text": "<p>123</p>"}, {"location": "events/", "title": "Events", "text": "<p>123</p>"}, {"location": "extensions/", "title": "Extensions", "text": "<p>Coming soon</p>"}, {"location": "getting-started/", "title": "Getting started", "text": "<p>123</p>"}, {"location": "logs/", "title": "Logs", "text": "<p>123</p>"}, {"location": "moderation/", "title": "Moderation", "text": "<p>123</p>"}, {"location": "patch-notes/", "title": "Patch Notes", "text": ""}, {"location": "patch-notes/#patch-notes", "title": "Patch Notes", "text": "Version 1.0.0 - 26/09/2024"}, {"location": "patch-notes/#1-moderation-panel", "title": "1. Moderation Panel", "text": "<ul> <li>Enhanced tools for effectively managing and moderating your server.</li> </ul>"}, {"location": "patch-notes/#2-integrated-social-media", "title": "2. Integrated Social Media", "text": "<ul> <li>Seamless connection and management of your social media accounts.</li> </ul>"}, {"location": "patch-notes/#3-staff-recruitment-page", "title": "3. Staff Recruitment Page", "text": "<ul> <li>A dedicated interface for recruiting and managing staff members efficiently.</li> </ul>"}, {"location": "patch-notes/#4-bot-management", "title": "4. Bot Management", "text": "<ul> <li>New features for effortless management and configuration of your Discord bots.</li> </ul>"}, {"location": "patch-notes/#5-command-extensions", "title": "5. Command Extensions", "text": "<ul> <li>Ability to add and customize commands to enhance functionality as needed.</li> </ul>"}, {"location": "patch-notes/#6-community-rules", "title": "6. Community Rules", "text": "<ul> <li>Tools to manage and display community guidelines for members.</li> </ul>"}, {"location": "patch-notes/#7-community-staff-list", "title": "7. Community Staff List", "text": "<ul> <li>Access to a comprehensive list of community staff members and their roles.</li> </ul>"}, {"location": "patch-notes/#8-discord-server-advertising", "title": "8. Discord Server Advertising", "text": "<ul> <li>Improved methods for promoting your server and attracting new members.</li> </ul>"}, {"location": "patch-notes/#9-customization", "title": "9. Customization", "text": "<ul> <li>New options for personalizing the dashboard to fit your community\u2019s unique needs.</li> </ul>"}, {"location": "patch-notes/#10-discord-role-shop", "title": "10. Discord Role Shop", "text": "<ul> <li>A system designed for managing roles and permissions for your community members.</li> </ul>"}, {"location": "patch-notes/#11-event-tournament-setup", "title": "11. Event &amp; Tournament Setup", "text": "<ul> <li>New functionalities for organizing and managing community events and tournaments.</li> </ul>"}, {"location": "patch-notes/#12-announcements", "title": "12. Announcements", "text": "<ul> <li>Enhanced capabilities for making important announcements to keep your community informed.</li> </ul>"}, {"location": "patch-notes/#13-logs", "title": "13. Logs", "text": "<ul> <li>Improved tracking of activities and changes within your server for better oversight.</li> </ul>"}, {"location": "patch-notes/#14-channel-groups", "title": "14. Channel Groups", "text": "<ul> <li>Ability to organize channels into groups for more efficient management.</li> </ul>"}, {"location": "patch-notes/#15-developer-plugin", "title": "15. Developer Plugin", "text": "<ul> <li>New customizable plugins to extend functionality based on your needs.</li> </ul>"}, {"location": "patch-notes/#16-docker-support", "title": "16. Docker Support", "text": "<ul> <li>Simplified setup process to easily start the platform anywhere with Docker.</li> </ul>"}, {"location": "policy/", "title": "Policy", "text": "<p>123</p>"}, {"location": "recruitment/", "title": "Recruitment", "text": "<p>123</p>"}, {"location": "role-shop/", "title": "Role shop", "text": "<p>123</p>"}, {"location": "roles/", "title": "Roles", "text": "<p>123</p>"}, {"location": "self-services/", "title": "Self services", "text": "<p>123</p>"}, {"location": "support/", "title": "Support", "text": "<p>123</p>"}, {"location": "swagger/", "title": "Swagger", "text": "<p>Info</p> <p>This page is under construction.</p> <p></p>"}, {"location": "updates/", "title": "Discord Community Dashboard", "text": ""}, {"location": "updates/#discord-community-dashboard", "title": "Discord Community Dashboard", "text": "<p>Welcome to the Discord Community Dashboard! This application provides a comprehensive suite of features designed to manage and enhance your Discord community. Below are the key features:</p>"}, {"location": "updates/#key-features", "title": "Key Features", "text": ""}, {"location": "updates/#1-moderation-panel", "title": "1. Moderation Panel", "text": "<ul> <li>Tools for effectively managing and moderating your server.</li> </ul>"}, {"location": "updates/#2-integrated-social-media", "title": "2. Integrated Social Media", "text": "<ul> <li>Connect and manage your social media accounts seamlessly.</li> </ul>"}, {"location": "updates/#3-staff-recruitment-page", "title": "3. Staff Recruitment Page", "text": "<ul> <li>A dedicated page for recruiting and managing staff members.</li> </ul>"}, {"location": "updates/#4-bot-management", "title": "4. Bot Management", "text": "<ul> <li>Manage and configure your Discord bots effortlessly.</li> </ul>"}, {"location": "updates/#5-command-extensions", "title": "5. Command Extensions", "text": "<ul> <li>Add and customize commands as needed to enhance functionality.</li> </ul>"}, {"location": "updates/#6-community-rules", "title": "6. Community Rules", "text": "<ul> <li>Manage and display community guidelines for members.</li> </ul>"}, {"location": "updates/#7-community-staff-list", "title": "7. Community Staff List", "text": "<ul> <li>Access a list of community staff members and their roles.</li> </ul>"}, {"location": "updates/#8-discord-server-advertising", "title": "8. Discord Server Advertising", "text": "<ul> <li>Promote your server and attract new members.</li> </ul>"}, {"location": "updates/#9-customization", "title": "9. Customization", "text": "<ul> <li>Personalize the dashboard to fit your community\u2019s unique needs.</li> </ul>"}, {"location": "updates/#10-discord-role-shop", "title": "10. Discord Role Shop", "text": "<ul> <li>A system for managing roles and permissions for your members.</li> </ul>"}, {"location": "updates/#11-event-tournament-setup", "title": "11. Event &amp; Tournament Setup", "text": "<ul> <li>Organize and manage community events and tournaments efficiently.</li> </ul>"}, {"location": "updates/#12-announcements", "title": "12. Announcements", "text": "<ul> <li>Make important announcements to keep your community informed.</li> </ul>"}, {"location": "updates/#13-logs", "title": "13. Logs", "text": "<ul> <li>Keep track of activities and changes within your server.</li> </ul>"}, {"location": "updates/#14-channel-groups", "title": "14. Channel Groups", "text": "<ul> <li>Organize channels into groups for improved management.</li> </ul>"}, {"location": "updates/#15-developer-plugin", "title": "15. Developer Plugin", "text": "<ul> <li>Extend functionality with customizable developer plugins.</li> </ul>"}, {"location": "updates/#16-docker-support", "title": "16. Docker Support", "text": "<ul> <li>Easily start the platform anywhere with Docker!</li> </ul> <p>For more details on each feature, please refer to the documentation provided.</p> <p>Feel free to contribute to the project and enhance our Discord community experience!</p>"}, {"location": "blog/", "title": "Blog", "text": ""}]}