{"config": {"lang": ["en"], "separator": "[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "api/", "title": "API Documentation", "text": ""}, {"location": "api/#api-documentation", "title": "API Documentation", "text": ""}, {"location": "api/#table-of-contents", "title": "Table of Contents", "text": "<ul> <li>API Documentation</li> <li>Table of Contents</li> <li>API Endpoints<ul> <li>/user/hello</li> <li>/users/new-announcement</li> <li>/users/staff-list</li> <li>/users/community-rules</li> <li>/users/staff-list</li> <li>/users/community-rules</li> <li>/users/new-position</li> <li>/users/delete-position/:position_name</li> <li>/users/shop-setup</li> <li>/users/points/:userId</li> <li>/users/add-points</li> <li>/users/remove-points</li> <li>/users/shop-setup</li> <li>/users/buy-role</li> <li>/users/is-running</li> <li>/users/start-bot</li> <li>/users/stop-bot</li> <li>/users/disable-command/:commandName</li> <li>/users/enable-command/:commandName</li> <li>/users/logs</li> <li>/users/warn-user</li> <li>/users/mute-user</li> <li>/users/kick-user</li> <li>/users/unmute-user</li> <li>/users/discord-ban-user</li> <li>/users/discord-unban-user</li> </ul> </li> </ul>"}, {"location": "api/#api-endpoints", "title": "API Endpoints", "text": ""}, {"location": "api/#userhello", "title": "/user/hello", "text": "<ul> <li>Method: GET</li> <li>Description: Returns a greeting message.</li> <li>Response:</li> <li><code>200 OK</code>: 'Hello world'</li> </ul>"}, {"location": "api/#usersnew-announcement", "title": "/users/new-announcement", "text": "<ul> <li>Method: POST</li> <li>Description: Creates a new announcement.</li> <li>Payload: { title, content, image }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Announcement created successfully', announcement: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { message: 'Title is required' } or { message: 'Either content or image must be provided' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to create announcement' }</li> </ul>"}, {"location": "api/#usersstaff-list", "title": "/users/staff-list", "text": "<ul> <li>Method: POST</li> <li>Description: Updates the staff list.</li> <li>Payload: { content }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Staff list updated successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'Content is required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to update staff list' }</li> </ul>"}, {"location": "api/#userscommunity-rules", "title": "/users/community-rules", "text": "<ul> <li>Method: POST</li> <li>Description: Updates the community rules.</li> <li>Payload: { content }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Community rules updated successfully' }</li> <li><code>400 Bad Request</code>: { error: 'Content is required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to update community rules' }</li> </ul>"}, {"location": "api/#usersstaff-list_1", "title": "/users/staff-list", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves the latest staff list.</li> <li>Response:</li> <li><code>200 OK</code>: { staffList: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { message: 'Staff list not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to retrieve staff list' }</li> </ul>"}, {"location": "api/#userscommunity-rules_1", "title": "/users/community-rules", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves the latest community rules.</li> <li>Response:</li> <li><code>200 OK</code>: { communityRules: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { message: 'Community rules not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to retrieve community rules' }</li> </ul>"}, {"location": "api/#usersnew-position", "title": "/users/new-position", "text": "<ul> <li>Method: POST</li> <li>Description: Creates or updates a position.</li> <li>Payload: { position_name, questions, discord_channel, position_image, position_description, status }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Position created successfully', position: { ... } }</li> <li><code>200 OK</code>: { message: 'Position updated successfully', position: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { message: 'You can only create up to 10 positions' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to create or update position' }</li> </ul>"}, {"location": "api/#usersdelete-positionposition_name", "title": "/users/delete-position/:position_name", "text": "<ul> <li>Method: DELETE</li> <li>Description: Deletes a position by name.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Position deleted successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { message: 'Position not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Failed to delete position' }</li> </ul>"}, {"location": "api/#usersshop-setup", "title": "/users/shop-setup", "text": "<ul> <li>Method: POST</li> <li>Description: Sets up a new role in the shop.</li> <li>Payload: { role_name, price, role_id }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'Role added successfully', role: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'role_name, price, and role_id are required' } or { error: 'Role name already exists' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to validate role_id with Discord' }</li> </ul>"}, {"location": "api/#userspointsuserid", "title": "/users/points/:userId", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves the points for a specific user.</li> <li>Response:</li> <li><code>200 OK</code>: { user_id, points }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'userId is required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersadd-points", "title": "/users/add-points", "text": "<ul> <li>Method: POST</li> <li>Description: Adds points to a user.</li> <li>Payload: { user_id, points }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Points added successfully', user: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and points are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersremove-points", "title": "/users/remove-points", "text": "<ul> <li>Method: POST</li> <li>Description: Removes points from a user.</li> <li>Payload: { user_id, points }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Points removed successfully', user_id, points }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and points are required' }</li> <li><code>404 Not Found</code>: { error: 'User not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersshop-setup_1", "title": "/users/shop-setup", "text": "<ul> <li>Method: DELETE</li> <li>Description: Deletes a role from the shop.</li> <li>Payload: { role_name }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Role deleted successfully', role: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'role_name is required' }</li> <li><code>404 Not Found</code>: { error: 'Role not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersbuy-role", "title": "/users/buy-role", "text": "<ul> <li>Method: POST</li> <li>Description: Allows a user to buy a role.</li> <li>Payload: { user_id, role_name }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Role purchased and assigned successfully', role: role_name }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and role_name are required' } or { error: 'Not enough points to buy this role' } or { error: 'User already has this role on Discord' }</li> <li><code>404 Not Found</code>: { error: 'Role not found' } or { error: 'User not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to fetch user roles from Discord' } or { error: 'Failed to assign role on Discord' } or { error: 'Failed to send DM with embed' }</li> </ul>"}, {"location": "api/#usersis-running", "title": "/users/is-running", "text": "<ul> <li>Method: GET</li> <li>Description: Checks if the bot is currently running.</li> <li>Response:</li> <li><code>200 OK</code>: { isRunning: true, message: 'Bot is running.' } or { isRunning: false, message: 'Bot is not running.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { message: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersstart-bot", "title": "/users/start-bot", "text": "<ul> <li>Method: GET</li> <li>Description: Starts the bot if it is not already running.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Bot started successfully.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to start bot.' }</li> </ul>"}, {"location": "api/#usersstop-bot", "title": "/users/stop-bot", "text": "<ul> <li>Method: GET</li> <li>Description: Stops the bot if it is currently running.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Bot stopped successfully.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { error: 'Failed to stop bot.' }</li> </ul>"}, {"location": "api/#usersdisable-commandcommandname", "title": "/users/disable-command/:commandName", "text": "<ul> <li>Method: POST</li> <li>Description: Disables a specific command.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Command  disabled.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { error: 'Command not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersenable-commandcommandname", "title": "/users/enable-command/:commandName", "text": "<ul> <li>Method: POST</li> <li>Description: Enables a previously disabled command.</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'Command  enabled.' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>404 Not Found</code>: { error: 'Command not found' }</li> <li><code>500 Internal Server Error</code>: { message: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#userslogs", "title": "/users/logs", "text": "<ul> <li>Method: GET</li> <li>Description: Retrieves logs of actions performed by moderators.</li> <li>Response:</li> <li><code>200 OK</code>: [{ title, moderator, actionType, reason, details, timestamp }]</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#userswarn-user", "title": "/users/warn-user", "text": "<ul> <li>Method: POST</li> <li>Description: Issues a warning to a user.</li> <li>Payload: { user_id, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'WARN action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersmute-user", "title": "/users/mute-user", "text": "<ul> <li>Method: POST</li> <li>Description: Mutes a user for a specified duration.</li> <li>Payload: { user_id, duration, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'MUTE action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, duration, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#userskick-user", "title": "/users/kick-user", "text": "<ul> <li>Method: POST</li> <li>Description: Kicks a user from the server.</li> <li>Payload: { user_id, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'KICK action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersunmute-user", "title": "/users/unmute-user", "text": "<ul> <li>Method: POST</li> <li>Description: Unmutes a previously muted user.</li> <li>Payload: { user_id, moderator }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'User has been unmuted successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and moderator are required' }</li> <li><code>404 Not Found</code>: { error: 'Muted role not found' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersdiscord-ban-user", "title": "/users/discord-ban-user", "text": "<ul> <li>Method: POST</li> <li>Description: Bans a user from the server.</li> <li>Payload: { user_id, duration, reason, evidence, moderator }</li> <li>Response:</li> <li><code>201 Created</code>: { message: 'BAN action recorded successfully', moderation: { ... } }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id, duration, reason, and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "api/#usersdiscord-unban-user", "title": "/users/discord-unban-user", "text": "<ul> <li>Method: POST</li> <li>Description: Unbans a previously banned user.</li> <li>Payload: { user_id, moderator }</li> <li>Response:</li> <li><code>200 OK</code>: { message: 'User has been unbanned successfully' }</li> <li><code>403 Forbidden</code>: { message: 'API is currently disabled' }</li> <li><code>400 Bad Request</code>: { error: 'user_id and moderator are required' }</li> <li><code>500 Internal Server Error</code>: { error: 'Internal Server Error' }</li> </ul>"}, {"location": "bot-management/", "title": "Bot management", "text": "<p>123</p>"}, {"location": "community/", "title": "Community", "text": "<p>123</p>"}, {"location": "deployment/", "title": "Deployment", "text": "<p>123</p>"}, {"location": "development-plans/", "title": "Development plans", "text": "<p>123</p>"}, {"location": "docker/", "title": "Docker", "text": "<p>123</p>"}, {"location": "events/", "title": "Events", "text": "<p>123</p>"}, {"location": "extensions/", "title": "Extensions", "text": "<p>Coming soon</p>"}, {"location": "features/", "title": "Features", "text": ""}, {"location": "features/#features", "title": "Features", "text": "<p>Welcome to the Discord Community Dashboard! This application provides a comprehensive suite of features to manage and enhance your Discord community. Key features include:</p> <ul> <li>Moderation Panel: Tools for managing and moderating your server.</li> <li>Integrated Social Media: Connect and manage social media accounts.</li> <li>Staff Recruitment Page: A dedicated page for recruiting and managing staff.</li> <li>Bot Management: Manage and configure your Discord bots.</li> <li>Command Extensions: Add and customize commands as needed.</li> <li>Community Rules: Manage and display community guidelines.</li> <li>Community Staff List: A list of community staff members.</li> <li>Discord Server Advertising: Promote your server.</li> <li>Customization: Customize the dashboard to fit your community\u2019s needs.</li> <li>Discord Role Shop: A system for managing roles and permissions.</li> <li>Event &amp; Tournament Setup: Organize and manage community events and tournaments.</li> <li>Announcements: Make important announcements to your community.</li> <li>Logs: Keep track of activities and changes.</li> <li>Channel Groups: Organize channels into groups for better management.</li> <li>Developer Plugin: Extend functionality with developer plugins.</li> <li>Docker: Easy way to start the platform anywhere!</li> </ul> <p>For more details on each feature, please refer to the documentation provided.</p>"}, {"location": "features/#incoming-features", "title": "Incoming Features", "text": "<ul> <li>CI/CD</li> <li>Automated bot tests</li> <li>Self-service management</li> <li>NPM developer package template and publishing guide</li> </ul>"}, {"location": "getting-started/", "title": "Getting started", "text": "<p>123</p>"}, {"location": "installation/", "title": "Discord Community Dashboard", "text": ""}, {"location": "installation/#discord-community-dashboard", "title": "Discord Community Dashboard", "text": ""}, {"location": "installation/#requirements", "title": "Requirements", "text": "<ul> <li>Node.js Version: You must use Node.js version 18 or higher. To install and switch to Node.js v18, use the following commands:</li> </ul> nvm install 18v18.20.4 is already installed.Now using node v18.20.4 (npm v10.8.3)nvm use 18Now using node v18.20.4 (npm v10.8.3)"}, {"location": "installation/#getting-started", "title": "Getting Started", "text": ""}, {"location": "installation/#with-docker", "title": "With Docker", "text": "<p>To start the application using Docker, run:</p> <pre><code>./start.sh\n</code></pre> <p>To stop the Docker, please run:</p> <pre><code>./stop.sh\n</code></pre>"}, {"location": "installation/#without-docker", "title": "Without Docker", "text": "<p>To start the application without Docker, open a terminal and run:</p> cd discord_community_front &amp;&amp; ./start_no_docker.shCompiled successfully!You can now view discord-community-dashboard in the browser.  Local:            http://localhost:8080/discord-community-dashboard  On Your Network:  http://[NETWORK IP]:8080/discord-community-dashboardNote that the development build is not optimized.To create a production build, use npm run build.webpack compiled successfully <p>In another terminal, start the backend server:</p> cd discord_community_server &amp;&amp; node server.js(node:173369) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version(Use `node --trace-warnings ...` to show where the warning was created)(node:173369) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major versionServer is listening on port 8081MongoDB connected successfullyAllowedAccess with ID: 495265351270137883 already existsAdminWhitelist with ID: 495265351270137883 already exists <p></p>"}, {"location": "installation/#environment-variables", "title": "Environment Variables", "text": "<p>You need to create a .env file in the discord_community_server directory to configure your application. The following variables must be included in your .env file:</p> <pre><code>MONGODB_URI=\nDISCORD_CLIENT_ID=\nDISCORD_CLIENT_SECRET=\nDISCORD_BOT_TOKEN=\nDEFAULT_ID=\nADMIN_DEFAULT_ID=\nGUILD_ID=\nDISCORD_EVERYONE_ROLE_ID=\nCOOKIE_SECRET=\nDISCORD_REDIRECT_URI=http://localhost:8081/discord-oauth-callback\n</code></pre> <p>Make sure to fill in the values appropriately. Do not share sensitive information publicly.</p> <p></p>"}, {"location": "installation/#discord-setup", "title": "Discord setup", "text": "<p>Besides oauth which will be explained later. Here's how you can get a few .env data.</p> <p>COOKIE_SECRET:</p> nodeWelcome to Node.js v18.20.4.Type \".help\" for more information.crypto.randomUUID()'YOUR_CRYPTO_SECRET' <p>DEFAULT_ID &amp; ADMIN_DEFAULT_ID: Your discord ID  GUILD_ID: Your server ID  DISCORD_EVERYONE_ROLE_ID: The ID for the @everyone role (same as your Guild ID)</p> <p></p>"}, {"location": "installation/#discord-oauth-setup", "title": "Discord Oauth setup", "text": ""}, {"location": "installation/#overview", "title": "Overview", "text": "<p>To integrate Discord OAuth into your application, follow these steps to create an application in the Discord Developer Portal and obtain your credentials.</p>"}, {"location": "installation/#step-1-create-a-discord-application", "title": "Step 1: Create a Discord Application", "text": "<ol> <li>Go to the Discord Developer Portal: Visit Discord Developer Portal.</li> <li>Log In: Sign in with your Discord account.</li> <li>Create a New Application:</li> <li>Click on the \"New Application\" button.</li> <li>Enter a name for your application and click \"Create\".</li> </ol>"}, {"location": "installation/#step-2-set-up-oauth2", "title": "Step 2: Set Up OAuth2", "text": "<ol> <li>Navigate to the OAuth2 Tab:</li> <li>Select your application from the list.</li> <li> <p>Click on the \"OAuth2\" tab in the left sidebar.</p> </li> <li> <p>Configure OAuth2 Settings:</p> </li> <li>Redirects: Under \"Redirects,\" add your redirect URI. This should be your backend endpoint that handles the OAuth callback (e.g., <code>http://localhost:8081/discord-oauth-callback</code>).</li> <li>Scopes: Select the scopes your application requires. For basic user authentication, select:<ul> <li><code>identify</code></li> <li><code>join</code></li> </ul> </li> <li> <p>Bot: If your application requires bot functionality, you can also generate a bot token under the \"Bot\" tab.</p> </li> <li> <p>Generate the OAuth2 URL:</p> </li> <li>Scroll down to \"OAuth2 URL Generator.\"</li> <li>Select the scopes you configured earlier.</li> <li>Copy the generated URL.</li> </ol>"}, {"location": "installation/#step-3-set-up-your-env-file", "title": "Step 3: Set Up Your <code>.env</code> File", "text": "<p>Add the following lines to your <code>.env</code> file in the <code>discord_community_server</code> directory, filling in the placeholders with your application's values:</p> <p></p><pre><code>DISCORD_CLIENT_ID=your_client_id\nDISCORD_CLIENT_SECRET=your_client_secret\nDISCORD_REDIRECT_URI=http://localhost:8081/discord-oauth-callback\n</code></pre>"}, {"location": "installation/#mongodb-database-setup", "title": "MongoDB Database Setup", "text": "<p>To set up a MongoDB database, follow these steps:</p> <ul> <li>Create an Account on MongoDB Atlas: Go to MongoDB Atlas and sign up for an account.</li> <li>Create a New Cluster: After logging in, click on \"Build a Cluster\" and follow the prompts to create a new cluster.</li> <li>Connect to Your Cluster: Once your cluster is created, click on \"Connect\" and follow the instructions to add your IP address and create a database user.</li> <li>Get the Connection String: After setting up your user, you will be provided with a connection string. Replace the placeholder username and password in the string with your MongoDB user credentials. </li> </ul>"}, {"location": "policy/", "title": "Policy", "text": "<p>123</p>"}, {"location": "support/", "title": "Support", "text": "<p>123</p>"}, {"location": "swagger/", "title": "Swagger", "text": "<p>Info</p> <p>This page is under construction.</p> <p></p>"}, {"location": "updates/", "title": "Updates", "text": "<p>123</p>"}, {"location": "blog/", "title": "Blog", "text": ""}]}